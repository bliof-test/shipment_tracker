version: 2

ruby_image: &ruby_image
  image: circleci/ruby:2.7.4-node
  environment:
    BUNDLE_JOBS: 3
    BUNDLE_RETRY: 3
    BUNDLE_PATH: vendor/bundle
    RAILS_ENV: test
    DATABASE_URL: postgresql://st_test@127.0.0.1/shipment_tracker_test
    CODECLIMATE_REPO_TOKEN: $CODECLIMATE_REPO_TOKEN
    CC_TEST_REPORTER_ID: $CODECLIMATE_REPO_TOKEN

defaults: &defaults
  working_directory: ~/shipment_tracker
  docker:
    - *ruby_image
    - image: circleci/postgres:9.6-alpine
      environment:
        POSTGRES_DB: shipment_tracker_test
        POSTGRES_USER: st_test
        POSTGRES_PASSWORD: ''

install_system_packages: &install_system_packages
  run:
    name: Install system packages
    command: |
      sudo apt-get update -qq
      sudo apt-get install -qqy cmake postgresql-client

restore_gems: &restore_gems
  restore_cache:
    keys:
      - shipment_tracker-gems-v2-{{ checksum "Gemfile.lock" }}
      - shipment_tracker-gems-v2

bundle_install: &bundle_install
  run:
    name: Install gems
    command: bundle check || bundle install

cache_gems: &cache_gems
  save_cache:
    key: shipment_tracker-gems-v2-{{ checksum "Gemfile.lock" }}
    paths:
      - vendor/bundle

jobs:
  setup:
    <<: *defaults
    steps:
      - *install_system_packages
      - checkout
      - *restore_gems
      - *bundle_install
      - *cache_gems
      - run:
          name: Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - persist_to_workspace:
          root: ./tmp
          paths:
            - cc-test-reporter
  specs:
    <<: *defaults
    steps:
      - *install_system_packages
      - checkout
      - attach_workspace:
          at: ./tmp
      - *restore_gems
      - *bundle_install
      - *cache_gems
      - run: bundle exec rake db:setup
      - run:
          name: Run specs
          command: |
            bundle exec rake spec SPEC_OPTS="--format progress --format RspecJunitFormatter --out test-results/rspec/results.xml"
            ./tmp/cc-test-reporter format-coverage -t simplecov -o tmp/codeclimate.specs.json coverage/.resultset.json
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage
          destination: specs-coverage
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.specs.json
  features:
    <<: *defaults
    steps:
      - *install_system_packages
      - checkout
      - attach_workspace:
          at: ./tmp
      - *restore_gems
      - *bundle_install
      - *cache_gems
      - run: bundle exec rake db:setup
      - run:
          name: Run features
          command: |
            bundle exec rake cucumber
            ./tmp/cc-test-reporter format-coverage -t simplecov -o tmp/codeclimate.features.json coverage/features/.resultset.json
      - store_artifacts:
          path: coverage
          destination: features-coverage
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.features.json
  rubocop:
    <<: *defaults
    steps:
      - *install_system_packages
      - checkout
      - *restore_gems
      - *bundle_install
      - *cache_gems
      - run: bundle exec rubocop -D

  upload-coverage:
    working_directory: ~/shipment_tracker
    docker:
      - *ruby_image
    steps:
      - attach_workspace:
          at: ./tmp
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.*.json -p 2 -o tmp/codeclimate.total.json
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.total.json -r $CODECLIMATE_REPO_TOKEN

  publish-docker-image:
    docker:
      - image: docker:stable-git
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Login to Docker registry
          command: echo "$DOCKER_PASSWORD" | docker login --username="$DOCKER_USERNAME" --password-stdin $DOCKER_REGISTRY
      - run:
          name: Build Docker image
          command: |
            docker build . \
              --tag $CIRCLE_PROJECT_REPONAME \
              --pull \
              --build-arg NAME=$CIRCLE_PROJECT_REPONAME \
              --build-arg REVISION=$CIRCLE_SHA1 \
              --build-arg URL="https://github.com/FundingCircle/${CIRCLE_PROJECT_REPONAME}/tree/${CIRCLE_SHA1}" \
              --build-arg SOURCE="${CIRCLE_REPOSITORY_URL}" \
              --build-arg CREATED="$(date --utc +%FT%TZ)" \
              --build-arg MANAGER="${ENGINEERING_MANAGER_PLATFORM}" \
              --label "org.opencontainers.image.url=https://github.com/FundingCircle/${CIRCLE_PROJECT_REPONAME}/blob/${CIRCLE_SHA1}/Dockerfile" \
              --label "org.opencontainers.image.source=${CIRCLE_REPOSITORY_URL}" \
              --label "org.opencontainers.image.created=$(date --utc +%FT%TZ)" \
              --label "org.opencontainers.image.revision=${CIRCLE_SHA1}" \
              --label "org.fundingcircle.image.manager=${ENGINEERING_MANAGER_PLATFORM}"
      - run:
          name: Push to Docker registry
          command: |
            docker run \
              --env CIRCLE_BRANCH \
              --env CIRCLE_BUILD_NUM \
              --env CIRCLE_SHA1 \
              --env CIRCLE_PROJECT_REPONAME \
              --env DOCKER_USER="$DOCKER_USERNAME" \
              --env DOCKER_PASS="$DOCKER_PASSWORD" \
              --volume /var/run/docker.sock:/var/run/docker.sock \
              quay.io/fundingcircle/docker-scripts:latest docker/ci-docker-publish
      - run:
          name: Scan image
          command: |
            docker pull quay.io/fundingcircle/drone-prisma-cloud:1
            docker run \
              --env "REPO=${DOCKER_REGISTRY}/${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}" \
              --env "REGISTRY=$DOCKER_REGISTRY" \
              --env DOCKER_USERNAME \
              --env DOCKER_PASSWORD \
              --env "PRISMA_CLOUD_USER=$TWISTCLI_USERNAME" \
              --env "PRISMA_CLOUD_PASSWORD=$TWISTCLI_PASSWORD" \
              --env "TAGS=$CIRCLE_SHA1" \
              --env "GITHUB_TOKEN=$GITHUB_API_TOKEN" \
              --env "GITHUB_REPOSITORY=$CIRCLE_PROJECT_REPONAME" \
              --env "GIT_SHA=$CIRCLE_SHA1" \
              --volume /var/run/docker.sock:/var/run/docker.sock \
              quay.io/fundingcircle/drone-prisma-cloud:1

workflows:
  version: 2
  test-then-publish-docker-image:
    jobs:
      - setup
      - specs:
          requires:
            - setup
      - features:
          requires:
            - setup
      - rubocop:
          requires:
            - setup
      - upload-coverage:
          requires:
            - specs
            - features
      - publish-docker-image:
          context: org-global
